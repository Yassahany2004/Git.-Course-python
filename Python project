from abc import ABC, abstractmethod
class ProductBase(ABC):
    @abstractmethod
    def __str__(self):
        pass

class Product(ProductBase):
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def __str__(self):
        return f"{self.name} - ${self.price}"

class CartBase(ABC):
    @abstractmethod
    def add_product(self, product):
        pass

    @abstractmethod
    def view_cart(self):
        pass

class ShoppingCart(CartBase):
    def __init__(self):
        self.items = []

    def add_product(self, product):
        self.items.append(product)

    def view_cart(self):
        if not self.items:
            return "Cart is empty."
        return "\n".join([f"{i+1}. {item}" for i, item in enumerate(self.items)])

class InvoiceBase(ABC):
    @abstractmethod
    def generate_invoice(self):
        pass

class Invoice(InvoiceBase):
    def __init__(self, cart):
        self.items = cart.items
        self.total_price = sum(item.price for item in self.items)

    def generate_invoice(self):
        if not self.items:
            return "No items in the cart. Cannot generate invoice."
        invoice = "Invoice:\n\n"
        invoice += "\n".join([f"- {item}" for item in self.items])
        invoice += f"\nTotal Price: ${self.total_price}"
        invoice += "\n"
        return invoice

class OrderBase(ABC):
    @abstractmethod
    def place_order(self):
        pass

class Order(OrderBase):
    def __init__(self, cart):
        self.cart = cart
        self.invoice = Invoice(cart)

    def place_order(self):
        if not self.cart.items:
            return "Cart is empty. Cannot place order."
        return self.invoice.generate_invoice()

tshirt = Product("T-shirt", 200)
jeans = Product("Jeans", 350)

cart = ShoppingCart()
cart.add_product(tshirt)
cart.add_product(jeans)

order = Order(cart)
print(order.place_order())
